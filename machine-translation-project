{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12882149,"sourceType":"datasetVersion","datasetId":8150043}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/aishahaurakarimah/machine-translation-project?scriptVersionId=258427326\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# Import library yang dibutuhkan\nimport os\nimport io\nimport sentencepiece as spm\nfrom sklearn.model_selection import train_test_split\n\n# Ganti 'nama-dataset-anda' dengan nama dataset yang Anda unggah\nKAGGLE_DATA_PATH = \"/kaggle/input/translation-ind-eng/ind.txt\"\n\n# Cek apakah file data ada\nif not os.path.exists(KAGGLE_DATA_PATH):\n    raise FileNotFoundError(f\"File tidak ditemukan di path: {KAGGLE_DATA_PATH}. \"\n                            \"Pastikan Anda telah mengunggah dataset dan \"\n                            \"menambahkan path-nya di notebook.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:23:10.846214Z","iopub.execute_input":"2025-08-27T05:23:10.846504Z","iopub.status.idle":"2025-08-27T05:23:12.290934Z","shell.execute_reply.started":"2025-08-27T05:23:10.846472Z","shell.execute_reply":"2025-08-27T05:23:12.290091Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"!pip install sacrebleu","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:23:12.292149Z","iopub.execute_input":"2025-08-27T05:23:12.292547Z","iopub.status.idle":"2025-08-27T05:23:17.263757Z","shell.execute_reply.started":"2025-08-27T05:23:12.292519Z","shell.execute_reply":"2025-08-27T05:23:17.262952Z"}},"outputs":[{"name":"stdout","text":"Collecting sacrebleu\n  Downloading sacrebleu-2.5.1-py3-none-any.whl.metadata (51 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m51.8/51.8 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hCollecting portalocker (from sacrebleu)\n  Downloading portalocker-3.2.0-py3-none-any.whl.metadata (8.7 kB)\nRequirement already satisfied: regex in /usr/local/lib/python3.11/dist-packages (from sacrebleu) (2024.11.6)\nRequirement already satisfied: tabulate>=0.8.9 in /usr/local/lib/python3.11/dist-packages (from sacrebleu) (0.9.0)\nRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from sacrebleu) (1.26.4)\nRequirement already satisfied: colorama in /usr/local/lib/python3.11/dist-packages (from sacrebleu) (0.4.6)\nRequirement already satisfied: lxml in /usr/local/lib/python3.11/dist-packages (from sacrebleu) (5.4.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->sacrebleu) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->sacrebleu) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->sacrebleu) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->sacrebleu) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->sacrebleu) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->sacrebleu) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->sacrebleu) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->sacrebleu) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->sacrebleu) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.17->sacrebleu) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->sacrebleu) (2024.2.0)\nDownloading sacrebleu-2.5.1-py3-none-any.whl (104 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m104.1/104.1 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading portalocker-3.2.0-py3-none-any.whl (22 kB)\nInstalling collected packages: portalocker, sacrebleu\nSuccessfully installed portalocker-3.2.0 sacrebleu-2.5.1\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"# Pengunduhan dan pembersihan data","metadata":{}},{"cell_type":"code","source":"def load_and_clean_data(file_path):\n    \"\"\"\n    Memuat data dari file dan melakukan pembersihan awal.\n    \"\"\"\n    pairs = []\n    with open(file_path, 'r', encoding='utf-8') as f:\n        for line in f:\n            # Pisahkan berdasarkan tab dan ambil dua kolom pertama\n            parts = line.strip().split('\\t')\n            if len(parts) >= 2:\n                source = parts[0].lower().strip() # Ubah ke huruf kecil & hapus spasi\n                target = parts[1].lower().strip()\n                pairs.append((source, target))\n    return pairs\n\n# Muat dan bersihkan data\nall_pairs = load_and_clean_data(KAGGLE_DATA_PATH)\nprint(f\"Total pasangan kalimat setelah dibersihkan: {len(all_pairs)}\")\nprint(f\"Contoh pasangan pertama: {all_pairs[0]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:23:17.264852Z","iopub.execute_input":"2025-08-27T05:23:17.265192Z","iopub.status.idle":"2025-08-27T05:23:17.418139Z","shell.execute_reply.started":"2025-08-27T05:23:17.265152Z","shell.execute_reply":"2025-08-27T05:23:17.417289Z"}},"outputs":[{"name":"stdout","text":"Total pasangan kalimat setelah dibersihkan: 14881\nContoh pasangan pertama: ('hi.', 'hai.')\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"# Tokenisasi Subword dengan SentencePiece","metadata":{}},{"cell_type":"code","source":"def train_sentencepiece_model(pairs, model_prefix, vocab_size=8000):\n    \"\"\"\n    Melatih model SentencePiece dari pasangan kalimat dan menyimpannya.\n    \"\"\"\n    # Menggabungkan semua teks menjadi satu file untuk training SentencePiece\n    temp_file_path = f\"/kaggle/working/{model_prefix}_all.txt\"\n    with open(temp_file_path, \"w\", encoding=\"utf-8\") as f:\n        for src, trg in pairs:\n            f.write(src + \"\\n\")\n            f.write(trg + \"\\n\")\n    \n    # Melatih model SentencePiece\n    spm.SentencePieceTrainer.train(\n        f'--input={temp_file_path} '\n        f'--model_prefix=/kaggle/working/{model_prefix} '\n        f'--vocab_size={vocab_size} '\n        '--model_type=bpe '\n        '--bos_id=-1 --eos_id=-1 --unk_id=0 '\n        '--pad_id=1 '\n        '--user_defined_symbols=<pad>,<s>,</s>' # <-- Hapus <unk> dari sini\n    )\n    \n    # Memuat model yang sudah dilatih\n    sp = spm.SentencePieceProcessor()\n    sp.load(f\"/kaggle/working/{model_prefix}.model\")\n    return sp\n# Latih model SentencePiece\nsp_tokenizer = train_sentencepiece_model(all_pairs, \"bpe_tokenizer\", vocab_size=8000)\nprint(f\"Model SentencePiece berhasil dilatih dengan vocab size: {sp_tokenizer.get_piece_size()}\")\n\n# Uji coba tokenisasi\ntest_sentence = \"Aku ingin membuat sistem penerjemah otomatis dengan PyTorch.\"\ntoken_ids = sp_tokenizer.encode_as_ids(test_sentence)\ntokens = sp_tokenizer.encode_as_pieces(test_sentence)\nprint(f\"Kalimat asli: {test_sentence}\")\nprint(f\"Hasil token: {tokens}\")\nprint(f\"Token ID: {token_ids}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:23:17.419977Z","iopub.execute_input":"2025-08-27T05:23:17.420217Z","iopub.status.idle":"2025-08-27T05:23:18.221005Z","shell.execute_reply.started":"2025-08-27T05:23:17.420197Z","shell.execute_reply":"2025-08-27T05:23:18.219087Z"}},"outputs":[{"name":"stdout","text":"Model SentencePiece berhasil dilatih dengan vocab size: 8000\nKalimat asli: Aku ingin membuat sistem penerjemah otomatis dengan PyTorch.\nHasil token: ['▁', 'A', 'ku', '▁ingin', '▁membuat', '▁sistem', '▁pener', 'jemah', '▁ot', 'om', 'atis', '▁dengan', '▁', 'P', 'y', 'T', 'or', 'ch', '.']\nToken ID: [7963, 0, 34, 218, 598, 6490, 4628, 7075, 1096, 89, 5365, 167, 7963, 0, 7980, 0, 45, 184, 7977]\n","output_type":"stream"},{"name":"stderr","text":"sentencepiece_trainer.cc(178) LOG(INFO) Running command: --input=/kaggle/working/bpe_tokenizer_all.txt --model_prefix=/kaggle/working/bpe_tokenizer --vocab_size=8000 --model_type=bpe --bos_id=-1 --eos_id=-1 --unk_id=0 --pad_id=1 --user_defined_symbols=<pad>,<s>,</s>\nsentencepiece_trainer.cc(78) LOG(INFO) Starts training with : \ntrainer_spec {\n  input: /kaggle/working/bpe_tokenizer_all.txt\n  input_format: \n  model_prefix: /kaggle/working/bpe_tokenizer\n  model_type: BPE\n  vocab_size: 8000\n  self_test_sample_size: 0\n  character_coverage: 0.9995\n  input_sentence_size: 0\n  shuffle_input_sentence: 1\n  seed_sentencepiece_size: 1000000\n  shrinking_factor: 0.75\n  max_sentence_length: 4192\n  num_threads: 16\n  num_sub_iterations: 2\n  max_sentencepiece_length: 16\n  split_by_unicode_script: 1\n  split_by_number: 1\n  split_by_whitespace: 1\n  split_digits: 0\n  pretokenization_delimiter: \n  treat_whitespace_as_suffix: 0\n  allow_whitespace_only_pieces: 0\n  user_defined_symbols: <pad>\n  user_defined_symbols: <s>\n  user_defined_symbols: </s>\n  required_chars: \n  byte_fallback: 0\n  vocabulary_output_piece_score: 1\n  train_extremely_large_corpus: 0\n  seed_sentencepieces_file: \n  hard_vocab_limit: 1\n  use_all_vocab: 0\n  unk_id: 0\n  bos_id: -1\n  eos_id: -1\n  pad_id: 1\n  unk_piece: <unk>\n  bos_piece: <s>\n  eos_piece: </s>\n  pad_piece: <pad>\n  unk_surface:  ⁇ \n  enable_differential_privacy: 0\n  differential_privacy_noise_level: 0\n  differential_privacy_clipping_threshold: 0\n}\nnormalizer_spec {\n  name: nmt_nfkc\n  add_dummy_prefix: 1\n  remove_extra_whitespaces: 1\n  escape_whitespaces: 1\n  normalization_rule_tsv: \n}\ndenormalizer_spec {}\ntrainer_interface.cc(353) LOG(INFO) SentenceIterator is not specified. Using MultiFileSentenceIterator.\ntrainer_interface.cc(185) LOG(INFO) Loading corpus: /kaggle/working/bpe_tokenizer_all.txt\ntrainer_interface.cc(409) LOG(INFO) Loaded all 29762 sentences\ntrainer_interface.cc(425) LOG(INFO) Adding meta_piece: <unk>\ntrainer_interface.cc(425) LOG(INFO) Adding meta_piece: <pad>\ntrainer_interface.cc(425) LOG(INFO) Adding meta_piece: <s>\ntrainer_interface.cc(425) LOG(INFO) Adding meta_piece: </s>\ntrainer_interface.cc(430) LOG(INFO) Normalizing sentences...\ntrainer_interface.cc(539) LOG(INFO) all chars count=921408\ntrainer_interface.cc(550) LOG(INFO) Done: 99.9593% characters are covered.\ntrainer_interface.cc(560) LOG(INFO) Alphabet size=37\ntrainer_interface.cc(561) LOG(INFO) Final character coverage=0.999593\ntrainer_interface.cc(592) LOG(INFO) Done! preprocessed 29762 sentences.\ntrainer_interface.cc(598) LOG(INFO) Tokenizing input sentences with whitespace: 29762\ntrainer_interface.cc(609) LOG(INFO) Done! 16605\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=24107 min_freq=1\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6234 size=20 all=1114 active=1076 piece=▁tom\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3377 size=40 all=1947 active=1909 piece=un\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=2190 size=60 all=2758 active=2720 piece=▁g\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=1443 size=80 all=3455 active=3417 piece=ir\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=1144 size=100 all=4066 active=4028 piece=▁ke\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=1140 min_freq=73\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=919 size=120 all=4675 active=1589 piece=▁memb\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=766 size=140 all=5310 active=2224 piece=ga\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=636 size=160 all=5607 active=2521 piece=▁can\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=555 size=180 all=6052 active=2966 piece=akah\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=493 size=200 all=6398 active=3312 piece=unya\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=488 min_freq=68\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=455 size=220 all=6754 active=1334 piece=ab\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=411 size=240 all=7155 active=1735 piece=▁his\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=366 size=260 all=7350 active=1930 piece=▁ch\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=330 size=280 all=7616 active=2196 piece=▁leb\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=294 size=300 all=7983 active=2563 piece=▁terl\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=293 min_freq=59\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=259 size=320 all=8160 active=1167 piece=ind\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=241 size=340 all=8416 active=1423 piece=▁hari\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=224 size=360 all=8560 active=1567 piece=ud\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=208 size=380 all=8884 active=1891 piece=erja\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=197 size=400 all=9185 active=2192 piece=ika\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=197 min_freq=52\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=185 size=420 all=9369 active=1178 piece=uar\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=178 size=440 all=9655 active=1464 piece=obil\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=171 size=460 all=9845 active=1654 piece=▁baik\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=163 size=480 all=10001 active=1810 piece=▁come\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=155 size=500 all=10105 active=1914 piece=▁v\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=154 min_freq=46\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=147 size=520 all=10361 active=1231 piece=aik\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=142 size=540 all=10506 active=1376 piece=▁\"\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=137 size=560 all=10677 active=1547 piece=ion\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=131 size=580 all=10811 active=1681 piece=▁somet\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=126 size=600 all=10919 active=1789 piece=ait\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=126 min_freq=42\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=120 size=620 all=11060 active=1135 piece=ody\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=117 size=640 all=11193 active=1268 piece=▁may\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=114 size=660 all=11299 active=1374 piece=▁salah\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=109 size=680 all=11455 active=1530 piece=imu\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=106 size=700 all=11596 active=1671 piece=▁hanya\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=105 min_freq=38\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=102 size=720 all=11759 active=1163 piece=utu\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=99 size=740 all=11865 active=1269 piece=▁happen\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=96 size=760 all=11969 active=1373 piece=▁french\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=93 size=780 all=12051 active=1455 piece=ried\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=91 size=800 all=12207 active=1611 piece=▁sama\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=91 min_freq=34\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=89 size=820 all=12305 active=1099 piece=▁told\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=85 size=840 all=12365 active=1159 piece=▁saw\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=83 size=860 all=12429 active=1223 piece=▁sleep\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=80 size=880 all=12474 active=1268 piece=▁sal\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=78 size=900 all=12569 active=1363 piece=▁sen\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=78 min_freq=31\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=76 size=920 all=12706 active=1123 piece=▁turn\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=72 size=940 all=12817 active=1234 piece=▁bad\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=71 size=960 all=12925 active=1342 piece=▁terk\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=69 size=980 all=13059 active=1476 piece=▁cer\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=67 size=1000 all=13126 active=1543 piece=cle\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=67 min_freq=29\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=66 size=1020 all=13206 active=1077 piece=▁sure\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=65 size=1040 all=13274 active=1145 piece=▁tempat\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=62 size=1060 all=13401 active=1272 piece=ond\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=61 size=1080 all=13537 active=1408 piece=▁lap\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=60 size=1100 all=13649 active=1520 piece=▁youn\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=60 min_freq=27\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=58 size=1120 all=13706 active=1056 piece=▁fi\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=57 size=1140 all=13767 active=1117 piece=▁dir\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=56 size=1160 all=13834 active=1184 piece=▁hujan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=55 size=1180 all=13898 active=1248 piece=▁first\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=54 size=1200 all=13949 active=1299 piece=▁alone\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=54 min_freq=25\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=53 size=1220 all=14027 active=1079 piece=▁lupa\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=52 size=1240 all=14063 active=1115 piece=▁station\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=50 size=1260 all=14161 active=1213 piece=umb\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=49 size=1280 all=14207 active=1259 piece=air\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=49 size=1300 all=14324 active=1376 piece=▁stasiun\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=49 min_freq=23\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=47 size=1320 all=14385 active=1061 piece=ily\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=46 size=1340 all=14431 active=1107 piece=put\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=45 size=1360 all=14493 active=1169 piece=ys\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=45 size=1380 all=14555 active=1231 piece=▁doctor\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=44 size=1400 all=14575 active=1251 piece=▁hotel\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=44 min_freq=21\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=43 size=1420 all=14711 active=1134 piece=▁bawah\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=42 size=1440 all=14790 active=1213 piece=▁pri\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=42 size=1460 all=14803 active=1226 piece=▁terlambat\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=41 size=1480 all=14820 active=1243 piece=▁favorite\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=40 size=1500 all=14914 active=1337 piece=▁mener\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=40 min_freq=20\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=39 size=1520 all=14980 active=1061 piece=▁ran\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=38 size=1540 all=15078 active=1159 piece=unjuk\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=37 size=1560 all=15104 active=1185 piece=▁es\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=37 size=1580 all=15165 active=1246 piece=▁study\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=36 size=1600 all=15194 active=1275 piece=▁usu\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=36 min_freq=19\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=35 size=1620 all=15273 active=1078 piece=▁sho\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=35 size=1640 all=15284 active=1089 piece=▁menikah\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=34 size=1660 all=15341 active=1146 piece=▁boy\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=33 size=1680 all=15356 active=1161 piece=ny\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=33 size=1700 all=15424 active=1229 piece=▁cantik\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=33 min_freq=18\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=32 size=1720 all=15473 active=1050 piece=▁tok\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=32 size=1740 all=15506 active=1083 piece=▁stand\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=31 size=1760 all=15540 active=1117 piece=ates\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=31 size=1780 all=15580 active=1157 piece=▁light\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=31 size=1800 all=15568 active=1145 piece=▁sebenarnya\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=31 min_freq=16\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=30 size=1820 all=15635 active=1068 piece=▁milk\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=29 size=1840 all=15638 active=1071 piece=ges\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=29 size=1860 all=15724 active=1157 piece=▁head\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=29 size=1880 all=15719 active=1152 piece=▁things\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=28 size=1900 all=15764 active=1197 piece=jakan\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=28 min_freq=16\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=28 size=1920 all=15768 active=1000 piece=▁killed\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=27 size=1940 all=15833 active=1065 piece=▁blu\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=27 size=1960 all=15862 active=1094 piece=▁since\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=26 size=1980 all=15902 active=1134 piece=ason\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=26 size=2000 all=15945 active=1177 piece=▁grand\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=26 min_freq=15\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=25 size=2020 all=15946 active=996 piece=wh\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=25 size=2040 all=16032 active=1082 piece=▁naik\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=25 size=2060 all=16040 active=1090 piece=▁hingga\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=25 size=2080 all=16041 active=1091 piece=▁meninggalkan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=24 size=2100 all=16114 active=1164 piece=▁hate\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=24 min_freq=14\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=24 size=2120 all=16114 active=1001 piece=▁secara\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=23 size=2140 all=16143 active=1030 piece=▁cu\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=23 size=2160 all=16206 active=1093 piece=▁mata\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=23 size=2180 all=16235 active=1122 piece=▁semalam\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=22 size=2200 a","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"# Pembagian Data Train/Valid/Test","metadata":{}},{"cell_type":"code","source":"# Bagi data menjadi training dan sisanya (validasi + test)\ntrain_pairs, temp_pairs = train_test_split(all_pairs, test_size=0.2, random_state=42)\n\n# Bagi sisa data menjadi validasi dan test\nval_pairs, test_pairs = train_test_split(temp_pairs, test_size=0.5, random_state=42)\n\nprint(f\"Jumlah data training: {len(train_pairs)}\")\nprint(f\"Jumlah data validasi: {len(val_pairs)}\")\nprint(f\"Jumlah data test: {len(test_pairs)}\")\n\n# Contoh data pertama di setiap set\nprint(\"\\nContoh data training:\", train_pairs[0])\nprint(\"Contoh data validasi:\", val_pairs[0])\nprint(\"Contoh data test:\", test_pairs[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:23:18.221864Z","iopub.execute_input":"2025-08-27T05:23:18.222137Z","iopub.status.idle":"2025-08-27T05:23:18.236852Z","shell.execute_reply.started":"2025-08-27T05:23:18.222117Z","shell.execute_reply":"2025-08-27T05:23:18.235319Z"}},"outputs":[{"name":"stdout","text":"Jumlah data training: 11904\nJumlah data validasi: 1488\nJumlah data test: 1489\n\nContoh data training: (\"let's talk about your job.\", 'mari kita membicarakan tentang pekerjaanmu.')\nContoh data validasi: ('i bought shampoo and toothpaste.', 'aku membeli sampo dan pasta gigi.')\nContoh data test: ('crossing the white line is forbidden.', 'dilarang melewati garis putih.')\n","output_type":"stream"},{"name":"stderr","text":"ll=16297 active=1184 piece=ball\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=22 min_freq=13\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=22 size=2220 all=16385 active=1083 piece=▁free\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=22 size=2240 all=16405 active=1103 piece=▁tokyo\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=21 size=2260 all=16403 active=1101 piece=als\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=21 size=2280 all=16496 active=1194 piece=▁num\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=21 size=2300 all=16543 active=1241 piece=▁kedua\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=21 min_freq=13\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=21 size=2320 all=16551 active=1009 piece=▁country\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=20 size=2340 all=16557 active=1015 piece=pas\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=20 size=2360 all=16605 active=1063 piece=where\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=20 size=2380 all=16611 active=1069 piece=▁pisau\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=20 size=2400 all=16613 active=1071 piece=▁memaham\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=20 min_freq=12\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=19 size=2420 all=16663 active=1047 piece=anji\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=19 size=2440 all=16714 active=1098 piece=sible\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=19 size=2460 all=16747 active=1131 piece=▁gadis\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=19 size=2480 all=16741 active=1125 piece=▁serious\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=18 size=2500 all=16755 active=1139 piece=ony\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=18 min_freq=12\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=18 size=2520 all=16833 active=1074 piece=▁jen\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=18 size=2540 all=16880 active=1121 piece=▁five\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=18 size=2560 all=16897 active=1138 piece=▁knife\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=18 size=2580 all=16888 active=1129 piece=▁airport\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=18 size=2600 all=16877 active=1118 piece=▁matematika\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=18 min_freq=11\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=17 size=2620 all=16955 active=1079 piece=irim\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=17 size=2640 all=17009 active=1133 piece=▁bath\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=17 size=2660 all=17014 active=1138 piece=▁heavy\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=17 size=2680 all=17023 active=1147 piece=▁exactly\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=17 size=2700 all=17015 active=1139 piece=▁keretanya\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=17 min_freq=10\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=16 size=2720 all=17053 active=1039 piece=alik\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=16 size=2740 all=17117 active=1103 piece=ondon\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=16 size=2760 all=17128 active=1114 piece=▁crazy\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=16 size=2780 all=17126 active=1112 piece=▁taller\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=16 size=2800 all=17112 active=1098 piece=▁umbrella\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=16 min_freq=10\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=15 size=2820 all=17156 active=1045 piece=▁uj\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=15 size=2840 all=17210 active=1099 piece=▁wan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=15 size=2860 all=17242 active=1131 piece=▁sold\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=15 size=2880 all=17257 active=1146 piece=▁shirt\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=15 size=2900 all=17255 active=1144 piece=▁saying\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=15 min_freq=9\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=15 size=2920 all=17238 active=984 piece=▁computer\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=14 size=2940 all=17271 active=1017 piece=git\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=14 size=2960 all=17347 active=1093 piece=ikat\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=14 size=2980 all=17391 active=1137 piece=▁bone\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=14 size=3000 all=17400 active=1146 piece=ations\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=14 min_freq=9\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=14 size=3020 all=17413 active=1007 piece=▁mawar\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=14 size=3040 all=17410 active=1004 piece=▁pemain\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=14 size=3060 all=17404 active=998 piece=▁opinion\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3080 all=17395 active=989 piece=ff\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3100 all=17471 active=1065 piece=irip\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=13 min_freq=9\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3120 all=17496 active=1025 piece=abrak\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3140 all=17515 active=1044 piece=▁jemb\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3160 all=17524 active=1053 piece=▁beach\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3180 all=17515 active=1044 piece=▁woman\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3200 all=17522 active=1051 piece=▁address\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=13 min_freq=8\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3220 all=17517 active=995 piece=▁pilihan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=13 size=3240 all=17506 active=984 piece=▁mengemudi\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3260 all=17541 active=1019 piece=zed\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3280 all=17588 active=1066 piece=ukai\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3300 all=17620 active=1098 piece=▁wet\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=12 min_freq=8\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3320 all=17655 active=1036 piece=▁grow\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3340 all=17677 active=1058 piece=▁capek\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3360 all=17682 active=1063 piece=▁tanah\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3380 all=17681 active=1062 piece=▁months\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3400 all=17678 active=1059 piece=▁matahari\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=12 min_freq=8\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=12 size=3420 all=17668 active=991 piece=▁tinggalkan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3440 all=17693 active=1016 piece=ech\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3460 all=17763 active=1086 piece=atus\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3480 all=17798 active=1121 piece=▁mis\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3500 all=17846 active=1169 piece=▁atur\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=11 min_freq=7\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3520 all=17852 active=1005 piece=acanya\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3540 all=17861 active=1014 piece=▁smart\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3560 all=17846 active=999 piece=▁tenang\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3580 all=17834 active=987 piece=▁panggil\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=11 size=3600 all=17830 active=983 piece=▁astronomy\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=11 min_freq=7\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3620 all=17845 active=1016 piece=▁ty\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3640 all=17881 active=1052 piece=▁hon\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3660 all=17906 active=1077 piece=siapa\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3680 all=17927 active=1098 piece=▁reli\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3700 all=17942 active=1113 piece=▁lewat\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=10 min_freq=7\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3720 all=17933 active=992 piece=▁button\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3740 all=17930 active=989 piece=▁speech\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3760 all=17924 active=983 piece=▁milikku\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3780 all=17910 active=969 piece=▁received\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=10 size=3800 all=17896 active=955 piece=▁mengundang\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=10 min_freq=7\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3820 all=17925 active=1029 piece=lic\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3840 all=17972 active=1076 piece=gian\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3860 all=18021 active=1125 piece=▁jel\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3880 all=18055 active=1159 piece=entuh\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3900 all=18083 active=1187 piece=▁decl\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=9 min_freq=6\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3920 all=18094 active=1009 piece=▁raja\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3940 all=18098 active=1013 piece=▁const\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3960 all=18100 active=1015 piece=▁quick\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=3980 all=18101 active=1016 piece=▁basket\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=4000 all=18099 active=1014 piece=▁perang\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=9 min_freq=6\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=4020 all=18087 active=987 piece=▁bioskop\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=4040 all=18079 active=979 piece=▁suicide\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=4060 all=18068 active=968 piece=▁semangka\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=9 size=4080 all=18053 active=953 piece=▁accustomed\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4100 all=18043 active=943 piece=hu\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=8 min_freq=6\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4120 all=18098 active=1054 piece=▁os\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4140 all=18142 active=1098 piece=ters\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4160 all=18186 active=1142 piece=▁oke\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4180 all=18207 active=1163 piece=vious\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4200 all=18213 active=1169 piece=▁mesk\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=8 min_freq=6\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4220 all=18226 active=1012 piece=gabung\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4240 all=18221 active=1007 piece=▁instr\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4260 all=18220 active=1006 piece=▁taste\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4280 all=18212 active=998 piece=▁dibaca\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4300 all=18201 active=987 piece=▁namaku\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=8 min_freq=6\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4320 all=18197 active=997 piece=andangan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4340 all=18191 active=991 piece=▁nervous\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4360 all=18181 active=981 piece=▁village\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4380 all=18165 active=965 piece=▁siapakah\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=8 size=4400 all=18150 active=950 piece=▁memikirkan\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=8 min_freq=5\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4420 all=18163 active=1014 piece=▁?\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4440 all=18209 active=1060 piece=une\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4460 all=18249 active=1100 piece=corn\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4480 all=18288 active=1139 piece=oboh\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4500 all=18321 active=1172 piece=▁pec\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=7 min_freq=5\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4520 all=18348 active=1023 piece=lasik\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4540 all=18354 active=1029 piece=▁demi\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4560 all=18359 active=1034 piece=▁obey\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4580 all=18367 active=1042 piece=▁worn\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4600 all=18377 active=1052 piece=▁bored\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=7 min_freq=5\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4620 all=18378 active=1002 piece=▁memec\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4640 all=18375 active=999 piece=▁walau\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4660 all=18363 active=987 piece=▁cerdas\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4680 all=18355 active=979 piece=▁pillow\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4700 all=18352 active=976 piece=sibility\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=7 min_freq=5\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4720 all=18339 active=986 piece=▁mendaki\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4740 all=18322 active=969 piece=▁borrowed\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4760 all=18308 active=955 piece=▁repaired\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4780 all=18293 active=940 piece=▁menyentuh\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=7 size=4800 all=18279 active=926 piece=▁mempelajari\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=7 min_freq=5\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4820 all=18320 active=1042 piece=ert\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4840 all=18352 active=1074 piece=▁om\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4860 all=18395 active=1117 piece=idih\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4880 all=18435 active=1157 piece=urau\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4900 all=18464 active=1186 piece=▁kud\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=6 min_freq=5\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4920 all=18487 active=1020 piece=▁zoo\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4940 all=18519 active=1052 piece=ocked\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4960 all=18545 active=1078 piece=▁conc\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=4980 all=18548 active=1081 piece=▁kilo\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5000 all=18552 active=1085 piece=▁rely\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=6 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5020 all=18568 active=1017 piece=kadang\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5040 all=18559 active=1008 piece=▁major\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5060 all=18549 active=998 piece=▁socks\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5080 all=18538 active=987 piece=ounting\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5100 all=18532 active=981 piece=▁garasi\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=6 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5120 all=18517 active=986 piece=▁membel\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5140 all=18518 active=987 piece=▁sempit\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5160 all=18511 active=980 piece=▁berniat\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5180 all=18497 active=966 piece=▁machine\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5200 all=18483 active=952 piece=▁rumahmu\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=6 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5220 all=18464 active=982 piece=▁maksudmu\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5240 all=18452 active=970 piece=▁serangga\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5260 all=18434 active=952 piece=▁interview\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5280 all=18423 active=941 piece=▁thousands\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=6 size=5300 all=18407 active=925 piece=▁bertanggung\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=6 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5320 all=18429 active=1023 piece=ye\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5340 all=18462 active=1056 piece=lat\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5360 all=18496 active=1090 piece=akmu\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5380 all=18535 active=1129 piece=kuat\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5400 all=18558 active=1152 piece=▁dry\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=5 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5420 all=18585 active=1027 piece=▁tie\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5440 all=18617 active=1059 piece=boleh\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5460 all=18638 active=1080 piece=murid\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5480 all=18640 active=1082 piece=▁crow\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5500 all=18636 active=1078 piece=▁lusa\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=5 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5520 all=18644 active=1009 piece=▁simp\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5540 all=18648 active=1013 piece=atural\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5560 all=18656 active=1021 piece=uction\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5580 all=18653 active=1018 piece=▁grade\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5600 all=18651 active=1016 piece=▁peach\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=5 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5620 all=18638 active=987 piece=▁thief\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5640 all=18631 active=980 piece=▁adanya\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5660 all=18618 active=967 piece=▁econom\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5680 all=18612 active=961 piece=▁method\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5700 all=18603 active=952 piece=▁silent\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=5 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5720 all=18588 active=986 piece=▁bernama\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5740 all=18573 active=971 piece=▁kelinci\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5760 all=18560 active=958 piece=▁purpose\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5780 all=18545 active=943 piece=▁atlantik\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5800 all=18531 active=929 piece=▁kecilkan\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=5 min_freq=4\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5820 all=18518 active=988 piece=▁realized\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5840 all=18500 active=970 piece=▁berdering\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5860 all=18482 active=952 piece=▁menangkap\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5880 all=18465 active=935 piece=▁illiterate\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5900 all=18452 active=922 piece=▁beritahukan\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=5 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=5 size=5920 all=18433 active=982 piece=▁unfortunately\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=5940 all=18457 active=1006 piece=cor\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=5960 all=18493 active=1042 piece=oph\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=5980 all=18522 active=1071 piece=▁ef\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6000 all=18540 active=1089 piece=deka\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6020 all=18568 active=1025 piece=iran\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6040 all=18578 active=1035 piece=usak\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6060 all=18597 active=1054 piece=▁kuh\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6080 all=18616 active=1073 piece=alaku\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6100 all=18637 active=1094 piece=gegas\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6120 all=18653 active=1016 piece=olved\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6140 all=18666 active=1029 piece=▁beef\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6160 all=18665 active=1028 piece=▁gram\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6180 all=18656 active=1019 piece=▁lisa\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6200 all=18654 active=1017 piece=▁pork\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6220 all=18655 active=1002 piece=▁ukul\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6240 all=18662 active=1009 piece=idikan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6260 all=18674 active=1021 piece=▁afric\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6280 all=18660 active=1007 piece=▁cruel\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6300 all=18651 active=998 piece=▁huruf\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6320 all=18636 active=986 piece=▁media\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6340 all=18637 active=987 piece=▁resmi\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6360 all=18623 active=973 piece=▁subuh\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6380 all=18621 active=971 piece=fection\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6400 all=18626 active=976 piece=▁bisnis\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6420 all=18614 active=988 piece=▁flight\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6440 all=18604 active=978 piece=▁invite\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6460 all=18602 active=976 piece=▁mexico\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6480 all=18588 active=962 piece=▁salary\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6500 all=18574 active=948 piece=▁within\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6520 all=18563 active=990 piece=▁bottles\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6540 all=18545 active=972 piece=▁heading\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6560 all=18532 active=959 piece=▁meaning\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6580 all=18521 active=948 piece=▁pretend\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6600 all=18507 active=934 piece=▁spiders\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6620 all=18493 active=987 piece=▁arrested\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6640 all=18473 active=967 piece=▁fotograf\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6660 all=18459 active=953 piece=▁mengajak\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6680 all=18441 active=935 piece=▁sedingin\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6700 all=18421 active=915 piece=▁upstairs\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6720 all=18407 active=987 piece=▁esperanto\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6740 all=18392 active=972 piece=▁menendang\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6760 all=18379 active=959 piece=▁sekolahmu\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6780 all=18360 active=940 piece=▁everywhere\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6800 all=18343 active=923 piece=▁seorangpun\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=4 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6820 all=18324 active=982 piece=▁penerbangan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=4 size=6840 all=18304 active=962 piece=▁mengendalikan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=6860 all=18321 active=979 piece=bau\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=6880 all=18353 active=1011 piece=tet\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=6900 all=18376 active=1034 piece=aven\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=6920 all=18395 active=1019 piece=hent\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=6940 all=18408 active=1032 piece=osis\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=6960 all=18422 active=1046 piece=▁bud\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=6980 all=18425 active=1049 piece=▁lab\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7000 all=18438 active=1062 piece=▁shr\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7020 all=18459 active=1020 piece=▁ine\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7040 all=18483 active=1044 piece=atnya\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7060 all=18495 active=1056 piece=imate\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7080 all=18512 active=1073 piece=ompet\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7100 all=18523 active=1084 piece=▁attr\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=3\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7120 all=18545 active=1021 piece=ikasi\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7140 all=18545 active=1021 piece=▁disp\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7160 all=18549 active=1025 piece=▁kupu\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7180 all=18543 active=1019 piece=▁rare\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7200 all=18539 active=1015 piece=▁vari\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=2\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7220 all=18539 active=1000 piece=acunan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7240 all=18546 active=1007 piece=estern\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7260 all=18554 active=1015 piece=uguran\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7280 all=18549 active=1010 piece=▁behav\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7300 all=18541 active=1002 piece=▁detik\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=2\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7320 all=18524 active=984 piece=▁harta\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7340 all=18517 active=977 piece=▁kupon\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7360 all=18517 active=977 piece=▁pagar\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7380 all=18505 active=965 piece=▁scrat\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7400 all=18498 active=958 piece=▁spent\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=2\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7420 all=18486 active=989 piece=▁walls\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7440 all=18496 active=999 piece=jaksana\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7460 all=18495 active=998 piece=▁banana\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7480 all=18480 active=983 piece=▁colder\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7500 all=18468 active=971 piece=▁heaven\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=2\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7520 all=18450 active=983 piece=▁kuliah\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7540 all=18439 active=972 piece=▁monkey\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7560 all=18426 active=959 piece=▁rolled\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7580 all=18413 active=946 piece=▁tongue\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7600 all=18404 active=937 piece=olahraga\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=2\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7620 all=18389 active=985 piece=▁catches\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7640 all=18374 active=970 piece=▁enemies\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7660 all=18356 active=952 piece=▁kalinya\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7680 all=18343 active=939 piece=▁menular\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7700 all=18326 active=922 piece=▁perkata\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=2\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7720 all=18309 active=982 piece=▁sebulan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7740 all=18291 active=964 piece=▁sundays\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7760 all=18275 active=948 piece=▁andalkan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7780 all=18256 active=929 piece=▁counting\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7800 all=18240 active=913 piece=▁gelasnya\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=2\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7820 all=18229 active=990 piece=▁memegang\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7840 all=18214 active=975 piece=▁previous\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7860 all=18194 active=955 piece=▁slightly\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7880 all=18176 active=937 piece=▁universe\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7900 all=18161 active=922 piece=▁ceritanya\nbpe_model_trainer.cc(159) LOG(INFO) Updating active symbols. max_freq=3 min_freq=2\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7920 all=18143 active=983 piece=▁kebutuhan\nbpe_model_trainer.cc(268) LOG(INFO) Added: freq=3 size=7940 all=18129 active=969 piece=▁nampaknya\ntrainer_interface.cc(687) LOG(INFO) Saving model: /kaggle/working/bpe_tokenizer.model\ntrainer_interface.cc(699) LOG(INFO) Saving vocabs: /kaggle/working/bpe_tokenizer.vocab\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"# Persiapan Dataset dan DataLoader","metadata":{}},{"cell_type":"code","source":"import torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence\n\n# Pastikan Anda sudah menjalankan kode preprocessing sebelumnya\n# dan memiliki variabel-variabel berikut:\n# train_pairs, val_pairs, test_pairs, dan sp_tokenizer\n\n# Dapatkan ID token khusus dari tokenizer SentencePiece\nPAD_token_id = sp_tokenizer.PieceToId('<pad>')\nSOS_token_id = sp_tokenizer.PieceToId('<s>')\nEOS_token_id = sp_tokenizer.PieceToId('</s>')\n\n# Buat kelas Dataset kustom\nclass TranslationDataset(Dataset):\n    def __init__(self, pairs, sp_tokenizer, sos_token, eos_token):\n        self.pairs = pairs\n        self.sp_tokenizer = sp_tokenizer\n        self.sos_token = sos_token\n        self.eos_token = eos_token\n\n    def __len__(self):\n        return len(self.pairs)\n\n    def __getitem__(self, idx):\n        src_text, trg_text = self.pairs[idx]\n        \n        # Tokenisasi dan tambahkan SOS/EOS\n        src_ids = [self.sos_token] + self.sp_tokenizer.encode_as_ids(src_text) + [self.eos_token]\n        trg_ids = [self.sos_token] + self.sp_tokenizer.encode_as_ids(trg_text) + [self.eos_token]\n        \n        src_tensor = torch.tensor(src_ids, dtype=torch.long)\n        trg_tensor = torch.tensor(trg_ids, dtype=torch.long)\n        \n        return src_tensor, trg_tensor\n\n# Fungsi untuk padding batch\ndef collate_fn(batch):\n    src_tensors = [item[0] for item in batch]\n    trg_tensors = [item[1] for item in batch]\n    \n    # Padding sequences to the same length\n    src_padded = pad_sequence(src_tensors, batch_first=True, padding_value=PAD_token_id)\n    trg_padded = pad_sequence(trg_tensors, batch_first=True, padding_value=PAD_token_id)\n    \n    return src_padded, trg_padded\n\n# Inisialisasi Dataset dan DataLoader\nBATCH_SIZE = 64\n\ntrain_dataset = TranslationDataset(train_pairs, sp_tokenizer, SOS_token_id, EOS_token_id)\nval_dataset = TranslationDataset(val_pairs, sp_tokenizer, SOS_token_id, EOS_token_id)\ntest_dataset = TranslationDataset(test_pairs, sp_tokenizer, SOS_token_id, EOS_token_id)\n\ntrain_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, collate_fn=collate_fn)\nval_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, collate_fn=collate_fn)\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, collate_fn=collate_fn)\n\nprint(f\"Jumlah batch training: {len(train_loader)}\")\nprint(f\"Jumlah batch validasi: {len(val_loader)}\")\nprint(f\"Jumlah batch test: {len(test_loader)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:23:18.237891Z","iopub.execute_input":"2025-08-27T05:23:18.238201Z","iopub.status.idle":"2025-08-27T05:23:22.473489Z","shell.execute_reply.started":"2025-08-27T05:23:18.23818Z","shell.execute_reply":"2025-08-27T05:23:22.472699Z"}},"outputs":[{"name":"stdout","text":"Jumlah batch training: 186\nJumlah batch validasi: 24\nJumlah batch test: 24\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# Implementasi Model Baseline (RNN + Attention)","metadata":{}},{"cell_type":"code","source":"import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Encoder(nn.Module):\n    def __init__(self, input_dim, emb_dim, hid_dim, dropout):\n        super().__init__()\n        self.embedding = nn.Embedding(input_dim, emb_dim, padding_idx=PAD_token_id)\n        self.rnn = nn.GRU(emb_dim, hid_dim, bidirectional=True, batch_first=True)\n        self.fc = nn.Linear(hid_dim * 2, hid_dim)\n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, src):\n        embedded = self.dropout(self.embedding(src))\n        outputs, hidden = self.rnn(embedded)\n        \n        # PERBAIKAN: Menggunakan hidden[-2] dan hidden[-1] agar lebih tangguh\n        # terhadap jumlah layer GRU yang berbeda.\n        hidden = torch.tanh(self.fc(torch.cat((hidden[-2,:,:], hidden[-1,:,:]), dim=1)))\n        \n        return outputs, hidden\n\nclass Attention(nn.Module):\n    def __init__(self, hid_dim):\n        super().__init__()\n        # PERBAIKAN: Perhitungan ukuran input untuk linear layer\n        self.attn = nn.Linear((hid_dim * 2) + hid_dim, hid_dim)\n        self.v = nn.Linear(hid_dim, 1, bias=False)\n        \n    def forward(self, hidden, encoder_outputs):\n        batch_size = encoder_outputs.shape[0]\n        src_len = encoder_outputs.shape[1]\n        \n        hidden = hidden.unsqueeze(1).repeat(1, src_len, 1)\n        \n        energy = torch.tanh(self.attn(torch.cat((hidden, encoder_outputs), dim=2)))\n        \n        attention = self.v(energy).squeeze(2)\n        \n        return F.softmax(attention, dim=1)\n\nclass Decoder(nn.Module):\n    def __init__(self, output_dim, emb_dim, hid_dim, dropout, attention):\n        super().__init__()\n        self.output_dim = output_dim\n        self.hid_dim = hid_dim\n        self.attention = attention\n        \n        self.embedding = nn.Embedding(output_dim, emb_dim, padding_idx=PAD_token_id)\n        self.rnn = nn.GRU(emb_dim + (hid_dim * 2), hid_dim, batch_first=True)\n        self.fc_out = nn.Linear(emb_dim + (hid_dim * 2) + hid_dim, output_dim)\n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, input, hidden, encoder_outputs):\n        input = input.unsqueeze(1)\n        embedded = self.dropout(self.embedding(input))\n        \n        a = self.attention(hidden, encoder_outputs)\n        a = a.unsqueeze(1)\n        \n        weighted = torch.bmm(a, encoder_outputs)\n        \n        rnn_input = torch.cat((embedded, weighted), dim=2)\n        \n        output, hidden = self.rnn(rnn_input, hidden.unsqueeze(0))\n        \n        embedded = embedded.squeeze(1)\n        output = output.squeeze(1)\n        weighted = weighted.squeeze(1)\n        \n        prediction = self.fc_out(torch.cat((output, weighted, embedded), dim=1))\n        \n        return prediction, hidden.squeeze(0)\n\nclass Seq2Seq(nn.Module):\n    def __init__(self, encoder, decoder, device):\n        super().__init__()\n        self.encoder = encoder\n        self.decoder = decoder\n        self.device = device\n        \n    def forward(self, src, trg, teacher_forcing_ratio = 0.5):\n        trg_len = trg.shape[1]\n        trg_vocab_size = self.decoder.output_dim\n        \n        outputs = torch.zeros(trg_len, trg.shape[0], trg_vocab_size).to(self.device)\n        \n        encoder_outputs, hidden = self.encoder(src)\n        \n        input = trg[:, 0]\n        \n        for t in range(1, trg_len):\n            output, hidden = self.decoder(input, hidden, encoder_outputs)\n            outputs[t] = output\n            \n            teacher_force = random.random() < teacher_forcing_ratio\n            top1 = output.argmax(1) \n            input = trg[:, t] if teacher_force else top1\n            \n        return outputs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:23:22.474325Z","iopub.execute_input":"2025-08-27T05:23:22.47471Z","iopub.status.idle":"2025-08-27T05:23:22.489116Z","shell.execute_reply.started":"2025-08-27T05:23:22.474678Z","shell.execute_reply":"2025-08-27T05:23:22.488299Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"# Pelatihan Model Baseline","metadata":{}},{"cell_type":"code","source":"import random\nimport time\nimport math\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\n# Atur device (GPU jika tersedia)\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(f\"Menggunakan device: {device}\")\n\n# Inisialisasi model\nINPUT_DIM = sp_tokenizer.get_piece_size()\nOUTPUT_DIM = sp_tokenizer.get_piece_size()\nEMB_DIM = 256\nHID_DIM = 512\nDROPOUT = 0.5\n\nattn = Attention(HID_DIM)\nencoder = Encoder(INPUT_DIM, EMB_DIM, HID_DIM, DROPOUT)\ndecoder = Decoder(OUTPUT_DIM, EMB_DIM, HID_DIM, DROPOUT, attn)\n\nmodel_rnn = Seq2Seq(encoder, decoder, device).to(device)\n\n# Inisialisasi bobot\ndef init_weights(m):\n    for name, param in m.named_parameters():\n        if 'weight' in name:\n            nn.init.normal_(param.data, mean=0, std=0.01)\n        else:\n            nn.init.constant_(param.data, 0)\n\nmodel_rnn.apply(init_weights)\nprint(f'Model RNN memiliki {sum(p.numel() for p in model_rnn.parameters() if p.requires_grad):,} parameter yang bisa dilatih')\n\n# Optimizer dan Loss Function\noptimizer = optim.Adam(model_rnn.parameters())\ncriterion = nn.CrossEntropyLoss(ignore_index=PAD_token_id)\n\ndef train(model, iterator, optimizer, criterion, clip, device):\n    model.train()\n    epoch_loss = 0\n    for i, (src, trg) in enumerate(iterator):\n        src, trg = src.to(device), trg.to(device)\n\n        optimizer.zero_grad()\n        output = model(src, trg)\n\n        output_dim = output.shape[-1]\n        output = output[1:].view(-1, output_dim)\n        trg = trg.permute(1, 0)[1:].reshape(-1)\n\n        loss = criterion(output, trg)\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n        optimizer.step()\n\n        epoch_loss += loss.item()\n    return epoch_loss / len(iterator)\n\ndef evaluate(model, iterator, criterion, device):\n    model.eval()\n    epoch_loss = 0\n    with torch.no_grad():\n        for i, (src, trg) in enumerate(iterator):\n            src, trg = src.to(device), trg.to(device)\n            output = model(src, trg, 0)  # non-teacher forcing\n\n            output_dim = output.shape[-1]\n            output = output[1:].view(-1, output_dim)\n            trg = trg.permute(1, 0)[1:].reshape(-1)\n\n            loss = criterion(output, trg)\n            epoch_loss += loss.item()\n    return epoch_loss / len(iterator)\n\nhistory_rnn = {\n    \"train_loss\": [],\n    \"val_loss\": [],\n    \"train_ppl\": [],\n    \"val_ppl\": [],\n}\n\n# Training Loop\nN_EPOCHS = 50\nCLIP = 1\nbest_valid_loss = float('inf')\n\nfor epoch in range(N_EPOCHS):\n    start_time = time.time()\n\n    train_loss = train(model_rnn, train_loader, optimizer, criterion, CLIP, device)\n    valid_loss = evaluate(model_rnn, val_loader, criterion, device)\n\n    end_time = time.time()\n    epoch_mins, epoch_secs = divmod(end_time - start_time, 60)\n\n    # --- Tambahkan kode ini untuk menyimpan history ---\n    history_rnn[\"train_loss\"].append(train_loss)\n    history_rnn[\"val_loss\"].append(valid_loss)\n    history_rnn[\"train_ppl\"].append(math.exp(train_loss))\n    history_rnn[\"val_ppl\"].append(math.exp(valid_loss))\n    # ----------------------------------------------------\n\n    if valid_loss < best_valid_loss:\n        best_valid_loss = valid_loss\n        torch.save(model_rnn.state_dict(), 'rnn_attention.pt')\n\n    print(f'Epoch: {epoch+1:02} | Time: {epoch_mins:.0f}m {epoch_secs:.0f}s')\n    print(f'\\tTrain Loss: {train_loss:.3f} | Train PPL: {math.exp(train_loss):7.3f}')\n    print(f'\\tValid Loss: {valid_loss:.3f} | Valid PPL: {math.exp(valid_loss):7.3f}')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:23:22.489947Z","iopub.execute_input":"2025-08-27T05:23:22.490185Z","iopub.status.idle":"2025-08-27T05:39:27.911909Z","shell.execute_reply.started":"2025-08-27T05:23:22.490167Z","shell.execute_reply":"2025-08-27T05:39:27.911077Z"}},"outputs":[{"name":"stdout","text":"Menggunakan device: cuda\nModel RNN memiliki 24,873,280 parameter yang bisa dilatih\nEpoch: 01 | Time: 0m 21s\n\tTrain Loss: 5.508 | Train PPL: 246.615\n\tValid Loss: 5.046 | Valid PPL: 155.416\nEpoch: 02 | Time: 0m 20s\n\tTrain Loss: 4.557 | Train PPL:  95.325\n\tValid Loss: 4.705 | Valid PPL: 110.491\nEpoch: 03 | Time: 0m 21s\n\tTrain Loss: 4.035 | Train PPL:  56.568\n\tValid Loss: 4.302 | Valid PPL:  73.865\nEpoch: 04 | Time: 0m 20s\n\tTrain Loss: 3.427 | Train PPL:  30.770\n\tValid Loss: 3.986 | Valid PPL:  53.829\nEpoch: 05 | Time: 0m 20s\n\tTrain Loss: 2.824 | Train PPL:  16.844\n\tValid Loss: 3.849 | Valid PPL:  46.940\nEpoch: 06 | Time: 0m 20s\n\tTrain Loss: 2.315 | Train PPL:  10.125\n\tValid Loss: 3.748 | Valid PPL:  42.452\nEpoch: 07 | Time: 0m 20s\n\tTrain Loss: 1.882 | Train PPL:   6.570\n\tValid Loss: 3.764 | Valid PPL:  43.118\nEpoch: 08 | Time: 0m 20s\n\tTrain Loss: 1.543 | Train PPL:   4.678\n\tValid Loss: 3.827 | Valid PPL:  45.926\nEpoch: 09 | Time: 0m 19s\n\tTrain Loss: 1.258 | Train PPL:   3.518\n\tValid Loss: 3.903 | Valid PPL:  49.572\nEpoch: 10 | Time: 0m 19s\n\tTrain Loss: 1.077 | Train PPL:   2.935\n\tValid Loss: 4.000 | Valid PPL:  54.610\nEpoch: 11 | Time: 0m 19s\n\tTrain Loss: 0.896 | Train PPL:   2.449\n\tValid Loss: 4.037 | Valid PPL:  56.667\nEpoch: 12 | Time: 0m 20s\n\tTrain Loss: 0.763 | Train PPL:   2.144\n\tValid Loss: 4.131 | Valid PPL:  62.211\nEpoch: 13 | Time: 0m 20s\n\tTrain Loss: 0.663 | Train PPL:   1.940\n\tValid Loss: 4.182 | Valid PPL:  65.484\nEpoch: 14 | Time: 0m 18s\n\tTrain Loss: 0.570 | Train PPL:   1.767\n\tValid Loss: 4.277 | Valid PPL:  72.019\nEpoch: 15 | Time: 0m 20s\n\tTrain Loss: 0.498 | Train PPL:   1.645\n\tValid Loss: 4.345 | Valid PPL:  77.067\nEpoch: 16 | Time: 0m 20s\n\tTrain Loss: 0.436 | Train PPL:   1.546\n\tValid Loss: 4.457 | Valid PPL:  86.235\nEpoch: 17 | Time: 0m 20s\n\tTrain Loss: 0.386 | Train PPL:   1.471\n\tValid Loss: 4.482 | Valid PPL:  88.450\nEpoch: 18 | Time: 0m 20s\n\tTrain Loss: 0.355 | Train PPL:   1.426\n\tValid Loss: 4.548 | Valid PPL:  94.448\nEpoch: 19 | Time: 0m 20s\n\tTrain Loss: 0.323 | Train PPL:   1.381\n\tValid Loss: 4.617 | Valid PPL: 101.159\nEpoch: 20 | Time: 0m 20s\n\tTrain Loss: 0.302 | Train PPL:   1.353\n\tValid Loss: 4.689 | Valid PPL: 108.746\nEpoch: 21 | Time: 0m 20s\n\tTrain Loss: 0.276 | Train PPL:   1.318\n\tValid Loss: 4.724 | Valid PPL: 112.612\nEpoch: 22 | Time: 0m 20s\n\tTrain Loss: 0.267 | Train PPL:   1.306\n\tValid Loss: 4.757 | Valid PPL: 116.452\nEpoch: 23 | Time: 0m 20s\n\tTrain Loss: 0.250 | Train PPL:   1.284\n\tValid Loss: 4.798 | Valid PPL: 121.298\nEpoch: 24 | Time: 0m 20s\n\tTrain Loss: 0.235 | Train PPL:   1.265\n\tValid Loss: 4.840 | Valid PPL: 126.455\nEpoch: 25 | Time: 0m 20s\n\tTrain Loss: 0.232 | Train PPL:   1.261\n\tValid Loss: 4.903 | Valid PPL: 134.723\nEpoch: 26 | Time: 0m 19s\n\tTrain Loss: 0.220 | Train PPL:   1.246\n\tValid Loss: 4.961 | Valid PPL: 142.716\nEpoch: 27 | Time: 0m 19s\n\tTrain Loss: 0.212 | Train PPL:   1.237\n\tValid Loss: 5.019 | Valid PPL: 151.250\nEpoch: 28 | Time: 0m 18s\n\tTrain Loss: 0.209 | Train PPL:   1.232\n\tValid Loss: 5.077 | Valid PPL: 160.244\nEpoch: 29 | Time: 0m 19s\n\tTrain Loss: 0.220 | Train PPL:   1.247\n\tValid Loss: 5.061 | Valid PPL: 157.762\nEpoch: 30 | Time: 0m 18s\n\tTrain Loss: 0.217 | Train PPL:   1.242\n\tValid Loss: 5.106 | Valid PPL: 165.069\nEpoch: 31 | Time: 0m 19s\n\tTrain Loss: 0.208 | Train PPL:   1.232\n\tValid Loss: 5.098 | Valid PPL: 163.758\nEpoch: 32 | Time: 0m 19s\n\tTrain Loss: 0.206 | Train PPL:   1.229\n\tValid Loss: 5.141 | Valid PPL: 170.964\nEpoch: 33 | Time: 0m 18s\n\tTrain Loss: 0.199 | Train PPL:   1.220\n\tValid Loss: 5.233 | Valid PPL: 187.388\nEpoch: 34 | Time: 0m 18s\n\tTrain Loss: 0.193 | Train PPL:   1.213\n\tValid Loss: 5.249 | Valid PPL: 190.436\nEpoch: 35 | Time: 0m 19s\n\tTrain Loss: 0.199 | Train PPL:   1.220\n\tValid Loss: 5.211 | Valid PPL: 183.273\nEpoch: 36 | Time: 0m 19s\n\tTrain Loss: 0.204 | Train PPL:   1.226\n\tValid Loss: 5.299 | Valid PPL: 200.228\nEpoch: 37 | Time: 0m 18s\n\tTrain Loss: 0.192 | Train PPL:   1.211\n\tValid Loss: 5.288 | Valid PPL: 197.996\nEpoch: 38 | Time: 0m 19s\n\tTrain Loss: 0.186 | Train PPL:   1.205\n\tValid Loss: 5.305 | Valid PPL: 201.424\nEpoch: 39 | Time: 0m 18s\n\tTrain Loss: 0.186 | Train PPL:   1.204\n\tValid Loss: 5.325 | Valid PPL: 205.455\nEpoch: 40 | Time: 0m 18s\n\tTrain Loss: 0.182 | Train PPL:   1.200\n\tValid Loss: 5.363 | Valid PPL: 213.287\nEpoch: 41 | Time: 0m 19s\n\tTrain Loss: 0.176 | Train PPL:   1.192\n\tValid Loss: 5.360 | Valid PPL: 212.829\nEpoch: 42 | Time: 0m 18s\n\tTrain Loss: 0.182 | Train PPL:   1.200\n\tValid Loss: 5.406 | Valid PPL: 222.706\nEpoch: 43 | Time: 0m 19s\n\tTrain Loss: 0.174 | Train PPL:   1.191\n\tValid Loss: 5.449 | Valid PPL: 232.521\nEpoch: 44 | Time: 0m 19s\n\tTrain Loss: 0.186 | Train PPL:   1.204\n\tValid Loss: 5.493 | Valid PPL: 242.958\nEpoch: 45 | Time: 0m 18s\n\tTrain Loss: 0.188 | Train PPL:   1.207\n\tValid Loss: 5.471 | Valid PPL: 237.752\nEpoch: 46 | Time: 0m 18s\n\tTrain Loss: 0.184 | Train PPL:   1.202\n\tValid Loss: 5.516 | Valid PPL: 248.674\nEpoch: 47 | Time: 0m 19s\n\tTrain Loss: 0.179 | Train PPL:   1.196\n\tValid Loss: 5.510 | Valid PPL: 247.244\nEpoch: 48 | Time: 0m 19s\n\tTrain Loss: 0.183 | Train PPL:   1.201\n\tValid Loss: 5.527 | Valid PPL: 251.485\nEpoch: 49 | Time: 0m 19s\n\tTrain Loss: 0.186 | Train PPL:   1.205\n\tValid Loss: 5.561 | Valid PPL: 260.205\nEpoch: 50 | Time: 0m 19s\n\tTrain Loss: 0.174 | Train PPL:   1.190\n\tValid Loss: 5.583 | Valid PPL: 265.985\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"# Implementasi Model Transformer","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport math\nimport time\n\n# Pastikan Anda sudah memiliki variabel berikut dari tahap sebelumnya:\n# PAD_token_id, SOS_token_id, EOS_token_id\n# train_loader, val_loader, test_loader\n# sp_tokenizer\n# device\n\nclass PositionalEncoding(nn.Module):\n    def __init__(self, d_model, dropout, max_len=5000):\n        super(PositionalEncoding, self).__init__()\n        self.dropout = nn.Dropout(p=dropout)\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        pe = pe.unsqueeze(0).transpose(0, 1)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        x = x + self.pe[:x.size(0), :]\n        return self.dropout(x)\n\n# --- ENCODER ---\nclass Encoder(nn.Module):\n    def __init__(self, input_dim, d_model, n_heads, n_layers, dropout):\n        super().__init__()\n        self.d_model = d_model\n        self.src_embedding = nn.Embedding(input_dim, d_model)\n        self.pos_encoder = PositionalEncoding(d_model, dropout)\n        encoder_layer = nn.TransformerEncoderLayer(d_model, n_heads, dropout=dropout)\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, n_layers)\n\n    def forward(self, src, src_key_padding_mask=None):\n        src_embedded = self.src_embedding(src) * math.sqrt(self.d_model)\n        src_pos_encoded = self.pos_encoder(src_embedded)\n        output = self.transformer_encoder(src_pos_encoded, src_key_padding_mask=src_key_padding_mask)\n        return output\n\n# --- DECODER ---\nclass Decoder(nn.Module):\n    def __init__(self, output_dim, d_model, n_heads, n_layers, dropout):\n        super().__init__()\n        self.d_model = d_model\n        self.trg_embedding = nn.Embedding(output_dim, d_model)\n        self.pos_encoder = PositionalEncoding(d_model, dropout)\n        decoder_layer = nn.TransformerDecoderLayer(d_model, n_heads, dropout=dropout)\n        self.transformer_decoder = nn.TransformerDecoder(decoder_layer, n_layers)\n        self.fc_out = nn.Linear(d_model, output_dim)\n\n    def forward(self, trg, memory, trg_mask=None, trg_key_padding_mask=None):\n        trg_embedded = self.trg_embedding(trg) * math.sqrt(self.d_model)\n        trg_pos_encoded = self.pos_encoder(trg_embedded)\n        output = self.transformer_decoder(\n            trg_pos_encoded, \n            memory, \n            tgt_mask=trg_mask, \n            tgt_key_padding_mask=trg_key_padding_mask\n        )\n        output = self.fc_out(output)\n        return output\n\n# --- GABUNGAN ENCODER-DECODER ---\nclass EncoderDecoderTransformer(nn.Module):\n    def __init__(self, encoder, decoder, src_pad_idx, trg_pad_idx):\n        super().__init__()\n        self.encoder = encoder\n        self.decoder = decoder\n        self.src_pad_idx = src_pad_idx\n        self.trg_pad_idx = trg_pad_idx\n\n    def forward(self, src, trg):\n        src_mask = self.make_src_mask(src)\n        trg_mask = self.make_trg_mask(trg)\n        src_key_padding_mask = (src == self.src_pad_idx).transpose(0, 1)\n        trg_key_padding_mask = (trg == self.trg_pad_idx).transpose(0, 1)\n\n        memory = self.encoder(src, src_key_padding_mask)\n        output = self.decoder(trg, memory, trg_mask, trg_key_padding_mask)\n        return output\n\n    def make_src_mask(self, src):\n        src_key_padding_mask = (src == self.src_pad_idx).transpose(0, 1)\n        return src_key_padding_mask\n\n    def make_trg_mask(self, trg):\n        trg_pad_mask = (trg == self.trg_pad_idx).transpose(0, 1)\n        trg_len = trg.shape[0]\n        trg_sub_mask = torch.triu(torch.ones((trg_len, trg_len), device=trg.device), diagonal=1).bool()\n        trg_mask = trg_pad_mask.unsqueeze(1).repeat(1, trg_len, 1) | trg_sub_mask.unsqueeze(0).repeat(trg.shape[1], 1, 1).transpose(0, 1)\n        return trg_mask\n\n\nclass LabelSmoothingCrossEntropy(nn.Module):\n    def __init__(self, smoothing=0.1, ignore_index=PAD_token_id):\n        super(LabelSmoothingCrossEntropy, self).__init__()\n        self.smoothing = smoothing\n        self.confidence = 1.0 - smoothing\n        self.ignore_index = ignore_index\n\n    def forward(self, pred, target):\n        pred = pred.transpose(1, 2)\n        n_class = pred.shape[-1]\n        one_hot = torch.zeros_like(pred).scatter(2, target.unsqueeze(2), 1)\n        one_hot = one_hot * self.confidence + (1 - one_hot) * self.smoothing / (n_class - 1)\n        \n        # Masking untuk padding\n        one_hot[:, :, self.ignore_index] = 0\n        \n        loss = torch.sum(-one_hot * torch.log_softmax(pred, dim=-1), dim=-1)\n        \n        # Masking untuk padding\n        loss = loss[target != self.ignore_index]\n        return loss.mean()\n\nclass NoamOpt:\n    def __init__(self, d_model, factor, warmup, optimizer):\n        self.optimizer = optimizer\n        self._step = 0\n        self.warmup = warmup\n        self.factor = factor\n        self.d_model = d_model\n        self._rate = 0\n\n    def step(self):\n        self._step += 1\n        rate = self.rate()\n        for p in self.optimizer.param_groups:\n            p['lr'] = rate\n        self._rate = rate\n        self.optimizer.step()\n\n    def rate(self, step=None):\n        if step is None:\n            step = self._step\n        return self.factor * (self.d_model ** (-0.5) * min(step ** (-0.5), step * self.warmup ** (-1.5)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:39:27.912883Z","iopub.execute_input":"2025-08-27T05:39:27.913289Z","iopub.status.idle":"2025-08-27T05:39:27.933708Z","shell.execute_reply.started":"2025-08-27T05:39:27.913269Z","shell.execute_reply":"2025-08-27T05:39:27.932957Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"# Pelatihan Model Transformer","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport math\nimport time\nimport matplotlib as plt\n\n# Pastikan Anda sudah memiliki variabel berikut dari tahap sebelumnya:\n# PAD_token_id, SOS_token_id, EOS_token_id\n# train_loader, val_loader, test_loader\n# sp_tokenizer\n# device\n\nclass PositionalEncoding(nn.Module):\n    def __init__(self, d_model, dropout, max_len=5000):\n        super(PositionalEncoding, self).__init__()\n        self.dropout = nn.Dropout(p=dropout)\n\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        pe = pe.unsqueeze(0).transpose(0, 1)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        # x = [seq_len, batch_size, d_model]\n        x = x + self.pe[:x.size(0), :]\n        return self.dropout(x)\n\n# --- Tambahkan causal mask ---\ndef generate_square_subsequent_mask(sz, device):\n    mask = torch.triu(torch.ones(sz, sz, device=device)) == 1\n    mask = mask.transpose(0, 1)\n    mask = mask.float().masked_fill(mask == 0, float('-inf')).masked_fill(mask == 1, float(0.0))\n    return mask\n\nclass Transformer(nn.Module):\n    def __init__(self, input_dim, output_dim, d_model, n_heads, n_layers, dropout):\n        super().__init__()\n        self.d_model = d_model\n\n        self.src_embedding = nn.Embedding(input_dim, d_model, padding_idx=PAD_token_id)\n        self.trg_embedding = nn.Embedding(output_dim, d_model, padding_idx=PAD_token_id)\n        self.pos_encoder = PositionalEncoding(d_model, dropout)\n\n        self.transformer = nn.Transformer(\n            d_model=d_model,\n            nhead=n_heads,\n            num_encoder_layers=n_layers,\n            num_decoder_layers=n_layers,\n            dropout=dropout,\n            batch_first=False\n        )\n\n        self.fc_out = nn.Linear(d_model, output_dim)\n\n    def forward(self, src, trg):\n        # src, trg = [seq_len, batch_size]\n        src_mask, trg_mask = self.make_masks(src, trg)\n\n        src_embedded = self.src_embedding(src) * math.sqrt(self.d_model)\n        trg_embedded = self.trg_embedding(trg) * math.sqrt(self.d_model)\n\n        src_pos_encoded = self.pos_encoder(src_embedded)\n        trg_pos_encoded = self.pos_encoder(trg_embedded)\n\n        # 🔥 Tambahkan causal mask untuk decoder\n        tgt_seq_len = trg.size(0)\n        tgt_mask = generate_square_subsequent_mask(tgt_seq_len, trg.device)\n\n        output = self.transformer(\n            src_pos_encoded, trg_pos_encoded,\n            src_key_padding_mask=src_mask,\n            tgt_key_padding_mask=trg_mask,\n            tgt_mask=tgt_mask\n        )\n\n        output = self.fc_out(output)\n        return output\n\n    def make_masks(self, src, trg):\n        src_key_padding_mask = (src == PAD_token_id).transpose(0, 1)\n        trg_key_padding_mask = (trg == PAD_token_id).transpose(0, 1)\n        return src_key_padding_mask, trg_key_padding_mask\n\n# Hyperparameter\nINPUT_DIM = sp_tokenizer.get_piece_size()\nOUTPUT_DIM = sp_tokenizer.get_piece_size()\nD_MODEL = 512\nN_HEADS = 8\nN_LAYERS = 3\nDROPOUT = 0.1\n\nmodel_transformer = Transformer(INPUT_DIM, OUTPUT_DIM, D_MODEL, N_HEADS, N_LAYERS, DROPOUT).to(device)\n\ndef init_weights_transformer(m):\n    if hasattr(m, 'weight') and m.weight.dim() > 1:\n        nn.init.xavier_uniform_(m.weight.data)\n\nmodel_transformer.apply(init_weights_transformer)\n\nprint(f'Model Transformer memiliki {sum(p.numel() for p in model_transformer.parameters() if p.requires_grad):,} parameter yang bisa dilatih')\n\noptimizer = optim.Adam(model_transformer.parameters(), lr=0.0001)\ncriterion = nn.CrossEntropyLoss(ignore_index=PAD_token_id)\n\ndef train_transformer(model, iterator, optimizer, criterion, clip):\n    model.train()\n    epoch_loss = 0\n\n    for i, (src, trg) in enumerate(iterator):\n        src, trg = src.to(device), trg.to(device)\n\n        optimizer.zero_grad()\n        src = src.T\n        trg = trg.T\n\n        output = model(src, trg[:-1])\n\n        output_dim = output.shape[-1]\n        output = output.view(-1, output_dim)\n        trg = trg[1:].reshape(-1)\n\n        loss = criterion(output, trg)\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n        optimizer.step()\n\n        epoch_loss += loss.item()\n\n    return epoch_loss / len(iterator)\n\ndef evaluate_transformer(model, iterator, criterion):\n    model.eval()\n    epoch_loss = 0\n\n    with torch.no_grad():\n        for i, (src, trg) in enumerate(iterator):\n            src, trg = src.to(device), trg.to(device)\n\n            src = src.T\n            trg = trg.T\n\n            output = model(src, trg[:-1])\n\n            output_dim = output.shape[-1]\n            output = output.view(-1, output_dim)\n            trg = trg[1:].reshape(-1)\n\n            loss = criterion(output, trg)\n            epoch_loss += loss.item()\n\n    return epoch_loss / len(iterator)\n\nhistory_transformer = {\n    \"train_loss\": [],\n    \"val_loss\": [],\n    \"train_ppl\": [],\n    \"val_ppl\": [],\n}\n\nN_EPOCHS = 50\nCLIP = 1\nbest_valid_loss = float('inf')\n\nfor epoch in range(N_EPOCHS):\n    start_time = time.time()\n\n    train_loss = train_transformer(model_transformer, train_loader, optimizer, criterion, CLIP)\n    valid_loss = evaluate_transformer(model_transformer, val_loader, criterion)\n\n    end_time = time.time()\n    epoch_mins, epoch_secs = divmod(end_time - start_time, 60)\n\n    # --- Tambahkan kode ini untuk menyimpan history ---\n    history_transformer[\"train_loss\"].append(train_loss)\n    history_transformer[\"val_loss\"].append(valid_loss)\n    history_transformer[\"train_ppl\"].append(math.exp(train_loss))\n    history_transformer[\"val_ppl\"].append(math.exp(valid_loss))\n    # ----------------------------------------------------\n\n    if valid_loss < best_valid_loss:\n        best_valid_loss = valid_loss\n        torch.save(model_transformer.state_dict(), 'transformer.pt')\n\n    print(f'Epoch: {epoch+1:02} | Time: {epoch_mins:.0f}m {epoch_secs:.0f}s')\n    print(f'\\tTrain Loss: {train_loss:.3f} | Train PPL: {math.exp(train_loss):7.3f}')\n    print(f'\\tValid Loss: {valid_loss:.3f} | Valid PPL: {math.exp(valid_loss):7.3f}')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:39:27.936013Z","iopub.execute_input":"2025-08-27T05:39:27.936301Z","iopub.status.idle":"2025-08-27T05:48:12.58128Z","shell.execute_reply.started":"2025-08-27T05:39:27.936282Z","shell.execute_reply":"2025-08-27T05:48:12.580485Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torch/nn/modules/transformer.py:385: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.self_attn.batch_first was not True(use batch_first for better inference performance)\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Model Transformer memiliki 34,367,296 parameter yang bisa dilatih\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torch/nn/functional.py:5962: UserWarning: Support for mismatched key_padding_mask and attn_mask is deprecated. Use same type for both instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Epoch: 01 | Time: 0m 10s\n\tTrain Loss: 5.439 | Train PPL: 230.226\n\tValid Loss: 4.632 | Valid PPL: 102.753\nEpoch: 02 | Time: 0m 10s\n\tTrain Loss: 4.245 | Train PPL:  69.758\n\tValid Loss: 4.013 | Valid PPL:  55.323\nEpoch: 03 | Time: 0m 10s\n\tTrain Loss: 3.684 | Train PPL:  39.821\n\tValid Loss: 3.600 | Valid PPL:  36.608\nEpoch: 04 | Time: 0m 10s\n\tTrain Loss: 3.234 | Train PPL:  25.375\n\tValid Loss: 3.285 | Valid PPL:  26.703\nEpoch: 05 | Time: 0m 10s\n\tTrain Loss: 2.857 | Train PPL:  17.414\n\tValid Loss: 3.033 | Valid PPL:  20.765\nEpoch: 06 | Time: 0m 10s\n\tTrain Loss: 2.542 | Train PPL:  12.706\n\tValid Loss: 2.848 | Valid PPL:  17.257\nEpoch: 07 | Time: 0m 10s\n\tTrain Loss: 2.264 | Train PPL:   9.623\n\tValid Loss: 2.718 | Valid PPL:  15.149\nEpoch: 08 | Time: 0m 10s\n\tTrain Loss: 2.026 | Train PPL:   7.583\n\tValid Loss: 2.602 | Valid PPL:  13.491\nEpoch: 09 | Time: 0m 10s\n\tTrain Loss: 1.816 | Train PPL:   6.149\n\tValid Loss: 2.509 | Valid PPL:  12.296\nEpoch: 10 | Time: 0m 10s\n\tTrain Loss: 1.627 | Train PPL:   5.088\n\tValid Loss: 2.449 | Valid PPL:  11.579\nEpoch: 11 | Time: 0m 10s\n\tTrain Loss: 1.461 | Train PPL:   4.310\n\tValid Loss: 2.387 | Valid PPL:  10.886\nEpoch: 12 | Time: 0m 10s\n\tTrain Loss: 1.306 | Train PPL:   3.693\n\tValid Loss: 2.361 | Valid PPL:  10.606\nEpoch: 13 | Time: 0m 10s\n\tTrain Loss: 1.165 | Train PPL:   3.205\n\tValid Loss: 2.299 | Valid PPL:   9.961\nEpoch: 14 | Time: 0m 10s\n\tTrain Loss: 1.038 | Train PPL:   2.824\n\tValid Loss: 2.299 | Valid PPL:   9.967\nEpoch: 15 | Time: 0m 10s\n\tTrain Loss: 0.924 | Train PPL:   2.518\n\tValid Loss: 2.297 | Valid PPL:   9.940\nEpoch: 16 | Time: 0m 10s\n\tTrain Loss: 0.815 | Train PPL:   2.259\n\tValid Loss: 2.301 | Valid PPL:   9.981\nEpoch: 17 | Time: 0m 10s\n\tTrain Loss: 0.715 | Train PPL:   2.045\n\tValid Loss: 2.295 | Valid PPL:   9.927\nEpoch: 18 | Time: 0m 10s\n\tTrain Loss: 0.630 | Train PPL:   1.878\n\tValid Loss: 2.324 | Valid PPL:  10.219\nEpoch: 19 | Time: 0m 10s\n\tTrain Loss: 0.549 | Train PPL:   1.731\n\tValid Loss: 2.315 | Valid PPL:  10.125\nEpoch: 20 | Time: 0m 10s\n\tTrain Loss: 0.478 | Train PPL:   1.614\n\tValid Loss: 2.346 | Valid PPL:  10.444\nEpoch: 21 | Time: 0m 10s\n\tTrain Loss: 0.420 | Train PPL:   1.521\n\tValid Loss: 2.355 | Valid PPL:  10.539\nEpoch: 22 | Time: 0m 10s\n\tTrain Loss: 0.365 | Train PPL:   1.441\n\tValid Loss: 2.382 | Valid PPL:  10.826\nEpoch: 23 | Time: 0m 10s\n\tTrain Loss: 0.321 | Train PPL:   1.379\n\tValid Loss: 2.418 | Valid PPL:  11.226\nEpoch: 24 | Time: 0m 10s\n\tTrain Loss: 0.282 | Train PPL:   1.326\n\tValid Loss: 2.386 | Valid PPL:  10.868\nEpoch: 25 | Time: 0m 10s\n\tTrain Loss: 0.248 | Train PPL:   1.282\n\tValid Loss: 2.453 | Valid PPL:  11.625\nEpoch: 26 | Time: 0m 10s\n\tTrain Loss: 0.222 | Train PPL:   1.249\n\tValid Loss: 2.459 | Valid PPL:  11.694\nEpoch: 27 | Time: 0m 10s\n\tTrain Loss: 0.198 | Train PPL:   1.219\n\tValid Loss: 2.494 | Valid PPL:  12.106\nEpoch: 28 | Time: 0m 10s\n\tTrain Loss: 0.181 | Train PPL:   1.199\n\tValid Loss: 2.542 | Valid PPL:  12.700\nEpoch: 29 | Time: 0m 10s\n\tTrain Loss: 0.166 | Train PPL:   1.181\n\tValid Loss: 2.555 | Valid PPL:  12.877\nEpoch: 30 | Time: 0m 10s\n\tTrain Loss: 0.151 | Train PPL:   1.164\n\tValid Loss: 2.570 | Valid PPL:  13.065\nEpoch: 31 | Time: 0m 10s\n\tTrain Loss: 0.139 | Train PPL:   1.149\n\tValid Loss: 2.603 | Valid PPL:  13.503\nEpoch: 32 | Time: 0m 10s\n\tTrain Loss: 0.131 | Train PPL:   1.140\n\tValid Loss: 2.611 | Valid PPL:  13.617\nEpoch: 33 | Time: 0m 10s\n\tTrain Loss: 0.120 | Train PPL:   1.128\n\tValid Loss: 2.641 | Valid PPL:  14.026\nEpoch: 34 | Time: 0m 10s\n\tTrain Loss: 0.115 | Train PPL:   1.121\n\tValid Loss: 2.692 | Valid PPL:  14.768\nEpoch: 35 | Time: 0m 10s\n\tTrain Loss: 0.112 | Train PPL:   1.118\n\tValid Loss: 2.734 | Valid PPL:  15.396\nEpoch: 36 | Time: 0m 10s\n\tTrain Loss: 0.104 | Train PPL:   1.110\n\tValid Loss: 2.697 | Valid PPL:  14.835\nEpoch: 37 | Time: 0m 10s\n\tTrain Loss: 0.099 | Train PPL:   1.104\n\tValid Loss: 2.725 | Valid PPL:  15.263\nEpoch: 38 | Time: 0m 10s\n\tTrain Loss: 0.094 | Train PPL:   1.099\n\tValid Loss: 2.760 | Valid PPL:  15.802\nEpoch: 39 | Time: 0m 10s\n\tTrain Loss: 0.092 | Train PPL:   1.096\n\tValid Loss: 2.786 | Valid PPL:  16.212\nEpoch: 40 | Time: 0m 10s\n\tTrain Loss: 0.089 | Train PPL:   1.093\n\tValid Loss: 2.790 | Valid PPL:  16.288\nEpoch: 41 | Time: 0m 10s\n\tTrain Loss: 0.085 | Train PPL:   1.088\n\tValid Loss: 2.833 | Valid PPL:  17.004\nEpoch: 42 | Time: 0m 10s\n\tTrain Loss: 0.081 | Train PPL:   1.085\n\tValid Loss: 2.821 | Valid PPL:  16.797\nEpoch: 43 | Time: 0m 10s\n\tTrain Loss: 0.079 | Train PPL:   1.082\n\tValid Loss: 2.872 | Valid PPL:  17.680\nEpoch: 44 | Time: 0m 10s\n\tTrain Loss: 0.076 | Train PPL:   1.079\n\tValid Loss: 2.918 | Valid PPL:  18.507\nEpoch: 45 | Time: 0m 10s\n\tTrain Loss: 0.074 | Train PPL:   1.077\n\tValid Loss: 2.910 | Valid PPL:  18.349\nEpoch: 46 | Time: 0m 10s\n\tTrain Loss: 0.072 | Train PPL:   1.075\n\tValid Loss: 2.943 | Valid PPL:  18.978\nEpoch: 47 | Time: 0m 10s\n\tTrain Loss: 0.070 | Train PPL:   1.073\n\tValid Loss: 2.910 | Valid PPL:  18.355\nEpoch: 48 | Time: 0m 10s\n\tTrain Loss: 0.066 | Train PPL:   1.069\n\tValid Loss: 2.942 | Valid PPL:  18.960\nEpoch: 49 | Time: 0m 10s\n\tTrain Loss: 0.067 | Train PPL:   1.069\n\tValid Loss: 2.961 | Valid PPL:  19.312\nEpoch: 50 | Time: 0m 10s\n\tTrain Loss: 0.064 | Train PPL:   1.066\n\tValid Loss: 2.940 | Valid PPL:  18.920\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport sacrebleu\nimport math\nimport sacrebleu.metrics\nimport matplotlib.pyplot as plt\nimport csv\n\n# --- Fungsi untuk menerjemahkan satu kalimat (inference) ---\ndef translate_sentence(model, sentence, sp_tokenizer, max_len=50):\n    model.eval()\n    \n    tokens = sp_tokenizer.encode_as_ids(sentence.lower().strip())\n    src_tensor = torch.LongTensor([sp_tokenizer.PieceToId('<s>')] + tokens + [sp_tokenizer.PieceToId('</s>')]).to(device)\n    src_tensor = src_tensor.unsqueeze(0) # [1, seq_len]\n\n    with torch.no_grad():\n        if isinstance(model, Seq2Seq): # Untuk model RNN\n            encoder_outputs, hidden = model.encoder(src_tensor)\n        elif isinstance(model, Transformer): # Untuk model Transformer\n            src_tensor_t = src_tensor.T # [seq_len, 1]\n            src_embedded = model.src_embedding(src_tensor_t) * math.sqrt(model.d_model)\n            src_pos_encoded = model.pos_encoder(src_embedded)\n            encoder_outputs = model.transformer.encoder(src_pos_encoded)\n            hidden = None\n    \n    trg_tokens = [sp_tokenizer.PieceToId('<s>')]\n    \n    for _ in range(max_len):\n        trg_tensor = torch.LongTensor(trg_tokens).unsqueeze(0).to(device) # [1, trg_len]\n\n        with torch.no_grad():\n            if isinstance(model, Seq2Seq):\n                output, hidden = model.decoder(trg_tensor[:, -1], hidden, encoder_outputs)\n            elif isinstance(model, Transformer):\n                trg_tensor_t = trg_tensor.T # [trg_len, 1]\n                trg_embedded = model.trg_embedding(trg_tensor_t) * math.sqrt(model.d_model)\n                trg_pos_encoded = model.pos_encoder(trg_embedded)\n                \n                trg_mask = model.transformer.generate_square_subsequent_mask(len(trg_pos_encoded)).to(device)\n                \n                output = model.transformer(encoder_outputs, trg_pos_encoded, tgt_mask=trg_mask)\n                output = model.fc_out(output[-1]) # Ambil output dari token terakhir\n        \n        pred_token = output.argmax().item()\n        trg_tokens.append(pred_token)\n        \n        if pred_token == sp_tokenizer.PieceToId('</s>'):\n            break\n\n    translation = sp_tokenizer.decode_ids(trg_tokens[1:-1])\n    return translation\n\n# --- Fungsi untuk menghitung metrik SacreBLEU dan chrF ---\ndef calculate_sacrebleu(model, iterator, sp_tokenizer):\n    all_hypotheses = []\n    all_references = []\n    \n    model.eval()\n    with torch.no_grad():\n        for i, (src, trg) in enumerate(iterator):\n            for j in range(src.shape[0]):\n                src_sentence_ids = src[j].tolist()\n                trg_sentence_ids = trg[j].tolist()\n\n                # Hapus token khusus\n                src_sentence_ids = [id for id in src_sentence_ids if id not in [0, 1, sp_tokenizer.PieceToId('<s>'), sp_tokenizer.PieceToId('</s>')]]\n                trg_sentence_ids = [id for id in trg_sentence_ids if id not in [0, 1, sp_tokenizer.PieceToId('<s>'), sp_tokenizer.PieceToId('</s>')]]\n                \n                src_text = sp_tokenizer.decode_ids(src_sentence_ids)\n                trg_text = sp_tokenizer.decode_ids(trg_sentence_ids)\n\n                hypothesis = translate_sentence(model, src_text, sp_tokenizer)\n                all_hypotheses.append(hypothesis)\n                all_references.append([trg_text])\n\n    # Inisialisasi objek metrik\n    bleu_metric = sacrebleu.metrics.BLEU()\n    chrf_metric = sacrebleu.metrics.CHRF()\n    \n    bleu_score = bleu_metric.corpus_score(all_hypotheses, all_references)\n    chrf_score = chrf_metric.corpus_score(all_hypotheses, all_references)\n    \n    return bleu_score.score, chrf_score.score\n\n# --- Muat model yang telah dilatih (opsional, jika Anda menyimpan bobotnya) ---\n# Jika Anda menjalankan ini setelah melatih model, baris ini tidak perlu\ntry:\n    model_rnn.load_state_dict(torch.load('rnn_attention.pt'))\n    model_transformer.load_state_dict(torch.load('transformer.pt'))\nexcept FileNotFoundError:\n    print(\"File bobot model tidak ditemukan. Pastikan Anda sudah melatih dan menyimpannya.\")\n    \n# --- Jalankan evaluasi ---\nprint(\"--- Evaluasi Model RNN+Attention ---\")\nrnn_bleu, rnn_chrf = calculate_sacrebleu(model_rnn, test_loader, sp_tokenizer)\nprint(f\"Skor BLEU (RNN+Attention): {rnn_bleu:.2f}\")\nprint(f\"Skor chrF (RNN+Attention): {rnn_chrf:.2f}\")\n\nprint(\"\\n--- Evaluasi Model Transformer ---\")\ntransformer_bleu, transformer_chrf = calculate_sacrebleu(model_transformer, test_loader, sp_tokenizer)\nprint(f\"Skor BLEU (Transformer): {transformer_bleu:.2f}\")\nprint(f\"Skor chrF (Transformer): {transformer_chrf:.2f}\")\n\n# --- Sajikan beberapa contoh terjemahan ---\nprint(\"\\n--- Contoh Hasil Terjemahan ---\")\nexample_sentences = [\n    (\"How are you?\", \"apa kabar?\"),\n    (\"I am a student.\", \"aku adalah seorang siswa\"),\n    (\"i'm happy today\", \"aku bahagia hari ini\"),\n    (\"He is an excellent teacher.\", \"dia adalah guru yang luar biasa.\"),\n]\n\nfor src_text, trg_text in example_sentences:\n    rnn_translation = translate_sentence(model_rnn, src_text, sp_tokenizer)\n    transformer_translation = translate_sentence(model_transformer, src_text, sp_tokenizer)\n    \n    print(\"-\" * 20)\n    print(f\"Kalimat Sumber: {src_text}\")\n    print(f\"Referensi: {trg_text}\")\n    print(f\"Terjemahan RNN: {rnn_translation}\")\n    print(f\"Terjemahan Transformer: {transformer_translation}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:48:12.582125Z","iopub.execute_input":"2025-08-27T05:48:12.582406Z","iopub.status.idle":"2025-08-27T05:49:21.268962Z","shell.execute_reply.started":"2025-08-27T05:48:12.58238Z","shell.execute_reply":"2025-08-27T05:49:21.268Z"}},"outputs":[{"name":"stdout","text":"--- Evaluasi Model RNN+Attention ---\nSkor BLEU (RNN+Attention): 0.00\nSkor chrF (RNN+Attention): 37.89\n\n--- Evaluasi Model Transformer ---\nSkor BLEU (Transformer): 39.76\nSkor chrF (Transformer): 42.79\n\n--- Contoh Hasil Terjemahan ---\n--------------------\nKalimat Sumber: How are you?\nReferensi: apa kabar?\nTerjemahan RNN: bagaimana kabar?\nTerjemahan Transformer: bagaimana kabar anda?\n--------------------\nKalimat Sumber: I am a student.\nReferensi: aku adalah seorang siswa\nTerjemahan RNN: aku seorang seorang siswa.\nTerjemahan Transformer: aku seorang siswa, bukan?\n--------------------\nKalimat Sumber: i'm happy today\nReferensi: aku bahagia hari ini\nTerjemahan RNN: aku senang lebih suka ini panas ini.\nTerjemahan Transformer: hari ini, ya?\n--------------------\nKalimat Sumber: He is an excellent teacher.\nReferensi: dia adalah guru yang luar biasa.\nTerjemahan RNN: dia adalah seorang yang yang guru.\nTerjemahan Transformer: dia seorang guru yang luar biasa.\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# =======================\n# 1. Simpan hasil eksperimen\n# =======================\n# Misalnya kamu punya dictionary hasil untuk tiap model\nresults = {\n    \"RNN\": {\n        \"train_loss\": history_rnn[\"train_loss\"],\n        \"val_loss\": history_rnn[\"val_loss\"],\n            \n    },\n    \"Transformer\": {\n        \"train_loss\": history_transformer[\"train_loss\"],\n        \"val_loss\": history_transformer[\"val_loss\"],\n        \n    }\n}\n\n\n# =========================\n# Plot untuk RNN\n# =========================\nplt.figure(figsize=(5,3))\nplt.plot(results[\"RNN\"][\"train_loss\"], label=\"RNN Train Loss\", linestyle=\"--\")\nplt.plot(results[\"RNN\"][\"val_loss\"], label=\"RNN Val Loss\")\nplt.title(\"Kurva Loss RNN\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# =========================\n# Plot untuk Transformer\n# =========================\nplt.figure(figsize=(5,3))\nplt.plot(results[\"Transformer\"][\"train_loss\"], label=\"Transformer Train Loss\", linestyle=\"--\")\nplt.plot(results[\"Transformer\"][\"val_loss\"], label=\"Transformer Val Loss\")\nplt.title(\"Kurva Loss Transformer\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:49:21.270048Z","iopub.execute_input":"2025-08-27T05:49:21.270502Z","iopub.status.idle":"2025-08-27T05:49:21.858681Z","shell.execute_reply.started":"2025-08-27T05:49:21.270475Z","shell.execute_reply":"2025-08-27T05:49:21.857897Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 500x300 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 500x300 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":12}]}